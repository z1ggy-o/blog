(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{330:function(e,t,s){"use strict";s.r(t);var o=s(7),a=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"short-summary-short-summary"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#short-summary-short-summary"}},[e._v("#")]),e._v(" Short Summary {#short-summary}")]),e._v(" "),t("p",[e._v("This paper mostly consists of two parts. The first part tells us why the "),t("code",[e._v("FileStore")]),e._v(" has performance issues.\nAnd the second part tells us how Ceph team build "),t("code",[e._v("BlueStore")]),e._v(" based on the\nlessons that they learnt from "),t("code",[e._v("FileStore")]),e._v(".")]),e._v(" "),t("p",[e._v("The main ideas of "),t("code",[e._v("BlueStore")]),e._v(" are:")]),e._v(" "),t("ol",[t("li",[e._v("Avoid using local file system to store and represent Ceph objects")]),e._v(" "),t("li",[e._v("Use KV-store to provide transaction mechanism instead of build it by ourself")])]),e._v(" "),t("h2",{attrs:{id:"what-s-the-problem-what-s-the-problem"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#what-s-the-problem-what-s-the-problem"}},[e._v("#")]),e._v(" What's the problem {#what-s-the-problem}")]),e._v(" "),t("p",[e._v("There is a software called "),t("code",[e._v("storage backend")]),e._v(" in Ceph. The "),t("code",[e._v("storage backend")]),e._v(" is\nresponsible to accept requests from upper layer of Ceph and do the real I/O on\nstorage devices.")]),e._v(" "),t("p",[e._v("Ceph used to use commonly used local file systems based storage backend (i.e.,\nFileStore). FileStore works, but not that well. There are mainly three\ndrawbacks in FileStore:")]),e._v(" "),t("ol",[t("li",[e._v("Hard to implement efficient transactions on top of existing file systems")]),e._v(" "),t("li",[e._v("The local file system' metadata performance is not great (e.g., enumerating\ndirectories, ordering in the return result)")]),e._v(" "),t("li",[e._v("Hard to adopt emerging storage hardware that abandon the venrable block\ninterface (e.g., Zone divecies)")])]),e._v(" "),t("h2",{attrs:{id:"why-the-problem-is-interesting-why-the-problem-is-interesting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#why-the-problem-is-interesting-why-the-problem-is-interesting"}},[e._v("#")]),e._v(" Why the problem is interesting {#why-the-problem-is-interesting}")]),e._v(" "),t("ol",[t("li",[e._v("Because storage backends do the real I/O job, the performance storage\nbackends domains the performance of the whole Ceph system.")]),e._v(" "),t("li",[e._v("For years, the developers of Ceph have had a lot of troubles when using local\nfile systems to build storage backends")])]),e._v(" "),t("h2",{attrs:{id:"the-core-ideas-the-core-ideas"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-core-ideas-the-core-ideas"}},[e._v("#")]),e._v(" The Core Ideas {#the-core-ideas}")]),e._v(" "),t("h3",{attrs:{id:"the-problems-of-filestore-the-problems-of-filestore"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#the-problems-of-filestore-the-problems-of-filestore"}},[e._v("#")]),e._v(" The problems of FileStore {#the-problems-of-filestore}")]),e._v(" "),t("ul",[t("li",[t("p",[t("strong",[e._v("Transaction")]),e._v(": in Ceph, all writes are transactions. There are three options for providing transaction on top of local file systems: leveraging file system internal transaction; implementing the write-ahead logging (WAL) in user space; and using a key-value store as the WAL")]),e._v(" "),t("ul",[t("li",[e._v("leveraging file system's transaction is not a good idea because they usually lack of some functionalities. And also, file system is in the kernel side, it is hard to expose the interfaces.")]),e._v(" "),t("li",[e._v("User space WAL: has consistency problem (not atom operations, because it is\na logical WAL, it use read/write system calls to write/read data to/from\nlogging part). The cost for handle the problem is expensive. Also slow\nread-modify-write and double-write (logging all data) problems.")]),e._v(" "),t("li",[e._v("Using KV-store: This is the cure. However, there is still some unnecessary\nfile system overhead like "),t("em",[e._v("journaling of journal")]),e._v(" problem")])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Slow metadata operations")]),e._v(": enumeration is slow. The read result from a object\nsets should in order, which file systems do not do. We need to do sorting\nafter read. To reduce the sorting overhead, Ceph limits the number of files in\na directory, which introduces "),t("em",[e._v("directory splition")]),e._v(". The dir splition has\noverhead.")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Does not support new storage hardware")]),e._v(": new storage devices may need\nmodifications in the existing file systems. If Ceph uses local file systems,\nthe Ceph team can only wait for the developers of the file systems to adopt\nthe new storage.")])])]),e._v(" "),t("p",[e._v("In the paper, there are more details. In summary, the reasons of above problems are:")]),e._v(" "),t("ol",[t("li",[e._v("File system overhead")]),e._v(" "),t("li",[e._v("Ceph uses file system metadata to represent Ceph object metadata. (i.e.,\nobject to file, object group to diectory) The file system metadata operations\nare not fast and also may have some consistent issues.")])]),e._v(" "),t("h3",{attrs:{id:"bluestore-bluestore"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bluestore-bluestore"}},[e._v("#")]),e._v(" BlueStore {#bluestore}")]),e._v(" "),t("ol",[t("li",[e._v("Does not use local file system anymore. Instead, store Ceph objects into raw\nstorage directly. This method avoids the overhead of file systems.")]),e._v(" "),t("li",[e._v("Use KV-store (i.e. RocksDB) to provide transaction and manage Ceph metadata.\nThis method provides much faster metadata operations and also avoid building\ntranstion mechanism by Ceph developer.")]),e._v(" "),t("li",[e._v("Because RocksDB runs on top of file systems. BlueStore has a very simply file\nsystem that only works for RocksDB called BlueFS. The BlueFS stores all the\ncontents in logging space and cleans invalid data periodly.")])]),e._v(" "),t("p",[e._v("If you understand the reason of why FileStore performs not well, you can simply\nunderstand the choices they did when build BlueStore.")]),e._v(" "),t("p",[e._v("BlueStore still has some issues. For example, because BlueStore do not use file\nsystems, it cannot leverage the OS page cache and need to build the cache by\nitself. However, build a effective cache is hard.")])])}),[],!1,null,null,null);t.default=a.exports}}]);